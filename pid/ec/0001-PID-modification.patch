From ad65d2cc286205bfc088237e5f316d143a53ee4b Mon Sep 17 00:00:00 2001
From: Boris0105 <r00543077@gmail.com>
Date: Thu, 28 Dec 2023 01:39:40 +0000
Subject: [PATCH] PID modification

---
 pid/ec/pid.cpp | 67 +++++++++++++++++++++++++++++++++-----------------
 pid/ec/pid.hpp |  4 ++-
 2 files changed, 48 insertions(+), 23 deletions(-)

diff --git a/pid/ec/pid.cpp b/pid/ec/pid.cpp
index ed1370c..8163632 100644
--- a/pid/ec/pid.cpp
+++ b/pid/ec/pid.cpp
@@ -49,6 +49,14 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
            const std::string* nameptr)
 {
 
+	
+     if(*nameptr == "Fan_Zone1")
+     {
+	double output;
+	output=setpoint;
+	return output;
+     }
+	
 	if (nameptr)
     {
         if (!(pidinfoptr->initialized))
@@ -58,9 +66,7 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
     }
 
 
-    Log({"PID function called : ", "- Name =", nameptr->c_str(), "- Input =", std::to_string(input).c_str(), "- Setpoint =", std::to_string(setpoint).c_str()});
-
-	auto logPtr = nameptr ? LogPeek(*nameptr) : nullptr;
+    auto logPtr = nameptr ? LogPeek(*nameptr) : nullptr;
 
     PidCoreContext coreContext;
     std::chrono::milliseconds msNow;
@@ -73,20 +79,42 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
     coreContext.input = input;
     coreContext.setpoint = setpoint;
 
-    double error;
-
-    double proportionalTerm;
+    double error = 0.0f;
+    double exOutput = 0.0f;
+    double lastError = 0.0f;
+    double lastError2  = 0.0f;	
+    double proportionalTerm = 0.0f;
     double integralTerm = 0.0f;
     double derivativeTerm = 0.0f;
     double feedFwdTerm = 0.0f;
-
+    //double upperbound = 0.0f;
+    //double bottombound = 0.0f;
     double output;
 
+
+    //upperbound =  setpoint + pidinfoptr->positiveHysteresis;
+    //bottombound = setpoint -  pidinfoptr->negativeHysteresis;
     // calculate P, I, D, FF
 
-    // Pid
+    /***
+    if (input >upperbound) {
+       error = setpoint - upperbound;
+   } else if (input < bottombound) {
+       error = setpoint - bottombound;
+   } else {
+       error = 0;
+   };
+***/
     error = setpoint - input;
-    proportionalTerm = pidinfoptr->proportionalCoeff * error;
+    
+    exOutput =  pidinfoptr->exOutput;
+    lastError = pidinfoptr->lastError;
+    lastError2= pidinfoptr->lastError2;
+
+
+    
+    // proportionalTerm
+    proportionalTerm = pidinfoptr->proportionalCoeff *(error - lastError);
 
     coreContext.error = error;
     coreContext.proportionalTerm = proportionalTerm;
@@ -95,21 +123,14 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
     // pId
     if (0.0f != pidinfoptr->integralCoeff)
     {
-        integralTerm = pidinfoptr->integral;
-        integralTerm += error * pidinfoptr->integralCoeff * pidinfoptr->ts;
-
+        integralTerm = pidinfoptr->integralCoeff * error;
         coreContext.integralTerm1 = integralTerm;
-
-        integralTerm = clamp(integralTerm, pidinfoptr->integralLimit.min,
-                             pidinfoptr->integralLimit.max);
     }
 
     coreContext.integralTerm2 = integralTerm;
 
     // piD
-    derivativeTerm = pidinfoptr->derivativeCoeff *
-                     ((error - pidinfoptr->lastError) / pidinfoptr->ts);
-
+    derivativeTerm = pidinfoptr->derivativeCoeff *( error - (2*lastError) + lastError2);
     coreContext.derivativeTerm = derivativeTerm;
 
     // FF
@@ -118,9 +139,9 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
 
     coreContext.feedFwdTerm = feedFwdTerm;
 
-    output = proportionalTerm + integralTerm + derivativeTerm + feedFwdTerm;
+    output = exOutput + proportionalTerm + integralTerm + derivativeTerm + feedFwdTerm;
 
-    Log({"PID calculation output : ", " error =", std::to_string(error).c_str(), \
+    Log({"PID calculation output : ","- Name = ", nameptr->c_str(),", exOutput =",std::to_string(exOutput).c_str(),", last error = ",std::to_string(lastError).c_str()," error =", std::to_string(error).c_str(),"last2Error",std::to_string(lastError2).c_str(), \
     " kp = ", std::to_string(pidinfoptr->proportionalCoeff).c_str(), \
     " ki =", std::to_string(pidinfoptr->integralCoeff).c_str(), \
     " kd = ", std::to_string(pidinfoptr->derivativeCoeff).c_str(), \
@@ -131,7 +152,7 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
     " feedFwdTerm = ", std::to_string(feedFwdTerm).c_str(), \
     " output = ", std::to_string(output).c_str()});
 
-	coreContext.output1 = output;
+    coreContext.output1 = output;
 
     output = clamp(output, pidinfoptr->outLim.min, pidinfoptr->outLim.max);
 
@@ -188,10 +209,12 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint,
     // larger integral term
     integralTerm = clamp(integralTerm, pidinfoptr->integralLimit.min,
                          pidinfoptr->integralLimit.max);
+    
     pidinfoptr->integral = integralTerm;
     pidinfoptr->initialized = true;
+    pidinfoptr->lastError2 = lastError;
     pidinfoptr->lastError = error;
-    pidinfoptr->lastOutput = output;
+    pidinfoptr->exOutput = output;
 
     coreContext.integralTerm = pidinfoptr->integral;
     coreContext.output = pidinfoptr->lastOutput;
diff --git a/pid/ec/pid.hpp b/pid/ec/pid.hpp
index 9dac6a4..d8f7cd6 100644
--- a/pid/ec/pid.hpp
+++ b/pid/ec/pid.hpp
@@ -23,8 +23,10 @@ typedef struct
 
     double ts;                // sample time in seconds
     double integral;          // integral of error
-    double lastOutput;        // value of last output
+    double lastOutput;
+    double exOutput;          // value of last output
     double lastError;         // value of last error
+    double lastError2;	      // The error in the last two steps			      // 
 
     double proportionalCoeff; // coeff for P
     double integralCoeff;     // coeff for I
-- 
2.34.1

